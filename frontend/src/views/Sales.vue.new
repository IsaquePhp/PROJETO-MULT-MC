<template>
  <div class="container mx-auto px-4 py-8">
    <!-- PDV Section -->
    <div class="mb-8">
      <h1 class="text-2xl font-bold mb-4">PDV</h1>
      <div class="bg-white rounded-lg shadow p-4">
        <!-- Customer Selection -->
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 mb-2">Cliente</label>
          <select 
            v-model="selectedCustomer"
            class="w-full p-2 border rounded-lg"
          >
            <option value="">Selecione um cliente</option>
            <option v-for="customer in customers" :key="customer.id" :value="customer">
              {{ customer.name }}
            </option>
          </select>
        </div>

        <!-- Product Search and Cart -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <!-- Product Search -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Adicionar Produto</label>
            <div class="relative">
              <input
                type="text"
                v-model="productSearch"
                @input="searchProducts"
                placeholder="Buscar produto..."
                class="w-full p-2 border rounded-lg"
              />
              <!-- Product Search Results -->
              <div v-if="showProductResults && filteredProducts.length > 0" class="absolute z-10 w-full mt-1 bg-white border rounded-lg shadow-lg">
                <div
                  v-for="product in filteredProducts"
                  :key="product.id"
                  @click="addToCart(product)"
                  class="p-2 hover:bg-gray-100 cursor-pointer"
                >
                  {{ product.name }} - R$ {{ formatPrice(product.price) }}
                </div>
              </div>
            </div>
          </div>

          <!-- Cart -->
          <div>
            <h3 class="text-lg font-medium mb-2">Carrinho</h3>
            <div class="border rounded-lg p-2">
              <div v-if="cart.length === 0" class="text-gray-500 text-center py-4">
                Carrinho vazio
              </div>
              <div v-else>
                <div v-for="(item, index) in cart" :key="index" class="flex justify-between items-center mb-2">
                  <div>
                    <span class="font-medium">{{ item.name }}</span>
                    <div class="text-sm text-gray-500">
                      {{ item.quantity }}x R$ {{ formatPrice(item.price) }}
                    </div>
                  </div>
                  <div class="flex items-center space-x-2">
                    <button
                      @click="updateQuantity(index, -1)"
                      class="p-1 text-gray-500 hover:text-gray-700"
                    >
                      -
                    </button>
                    <span>{{ item.quantity }}</span>
                    <button
                      @click="updateQuantity(index, 1)"
                      class="p-1 text-gray-500 hover:text-gray-700"
                    >
                      +
                    </button>
                    <button
                      @click="removeFromCart(index)"
                      class="p-1 text-red-500 hover:text-red-700"
                    >
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                    </button>
                  </div>
                </div>
                <div class="border-t mt-2 pt-2">
                  <div class="flex justify-between font-bold">
                    <span>Total:</span>
                    <span>R$ {{ formatPrice(cartTotal) }}</span>
                  </div>
                </div>
              </div>
            </div>
            <button
              @click="finalizeSale"
              :disabled="cart.length === 0 || !selectedCustomer"
              class="w-full mt-4 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Finalizar Venda
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Sales List Section -->
    <div class="mb-8">
      <h1 class="text-2xl font-bold mb-4">Vendas</h1>
      
      <!-- Filters -->
      <div class="bg-white rounded-lg shadow p-4 mb-4">
        <div class="flex items-center space-x-4">
          <div class="flex-1">
            <input
              type="text"
              v-model="searchQuery"
              placeholder="Buscar por código ou cliente..."
              class="w-full p-2 border rounded-lg"
            />
          </div>
        </div>
      </div>

      <!-- Sales List -->
      <div class="bg-white rounded-lg shadow overflow-hidden">
        <div class="p-4">
          <div v-if="loading" class="text-center py-4">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
          </div>

          <div v-else-if="error" class="text-center text-red-600 py-4">
            {{ error }}
          </div>

          <div v-else-if="sales.length === 0" class="text-center text-gray-500 py-4">
            Nenhuma venda encontrada
          </div>

          <div v-else>
            <table class="w-full">
              <thead>
                <tr class="border-b">
                  <th class="text-left p-2">Código</th>
                  <th class="text-left p-2">Cliente</th>
                  <th class="text-left p-2">Data</th>
                  <th class="text-right p-2">Total</th>
                  <th class="text-center p-2">Status</th>
                  <th class="text-center p-2">Ações</th>
                </tr>
              </thead>
              <tbody>
                <tr v-for="sale in filteredSales" :key="sale.id" class="border-b hover:bg-gray-50">
                  <td class="p-2">{{ sale.code }}</td>
                  <td class="p-2">{{ sale.customer?.name }}</td>
                  <td class="p-2">{{ formatDateTime(sale.created_at) }}</td>
                  <td class="p-2 text-right">R$ {{ formatPrice(sale.total) }}</td>
                  <td class="p-2 text-center">
                    <span
                      class="px-2 py-1 rounded text-sm"
                      :class="{
                        'bg-green-100 text-green-800': sale.status === 'completed',
                        'bg-yellow-100 text-yellow-800': sale.status === 'pending',
                        'bg-red-100 text-red-800': sale.status === 'cancelled'
                      }"
                    >
                      {{ sale.status }}
                    </span>
                  </td>
                  <td class="p-2 text-center">
                    <button
                      @click="openPrintModal(sale)"
                      class="text-blue-600 hover:text-blue-800"
                    >
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
                      </svg>
                    </button>
                  </td>
                </tr>
              </tbody>
            </table>

            <!-- Pagination -->
            <div class="flex justify-between items-center mt-4">
              <div class="text-sm text-gray-500">
                Mostrando {{ sales.length }} de {{ pagination.total }} vendas
              </div>
              
              <div class="flex space-x-2">
                <button
                  v-if="pagination.current_page > 1"
                  @click="loadSales(pagination.current_page - 1)"
                  class="px-3 py-1 rounded bg-gray-100 hover:bg-gray-200"
                >
                  Anterior
                </button>
                
                <button
                  v-if="sales.length === pagination.per_page"
                  @click="loadSales(pagination.current_page + 1)"
                  class="px-3 py-1 rounded bg-gray-100 hover:bg-gray-200"
                >
                  Próxima
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { ref, computed, onMounted } from 'vue'
import axios from '../plugins/axios'

export default {
  name: 'Sales',
  
  setup() {
    // Reactive variables
    const sales = ref([])
    const loading = ref(false)
    const error = ref(null)
    const searchQuery = ref('')
    const pagination = ref({
      current_page: 1,
      total: 0,
      per_page: 10
    })

    // PDV variables
    const customers = ref([])
    const selectedCustomer = ref(null)
    const productSearch = ref('')
    const products = ref([])
    const filteredProducts = ref([])
    const showProductResults = ref(false)
    const cart = ref([])

    // Computed properties
    const filteredSales = computed(() => {
      if (!searchQuery.value) return sales.value
      
      const search = searchQuery.value.toLowerCase()
      return sales.value.filter(sale => 
        sale.code.toLowerCase().includes(search) ||
        sale.customer?.name.toLowerCase().includes(search)
      )
    })

    const cartTotal = computed(() => {
      return cart.value.reduce((total, item) => {
        return total + (item.price * item.quantity)
      }, 0)
    })

    // Formatting functions
    function formatDateTime(dateString) {
      if (!dateString) return ''
      return new Date(dateString).toLocaleString('pt-BR')
    }

    function formatPrice(value) {
      if (!value) return '0,00'
      return Number(value).toLocaleString('pt-BR', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      })
    }

    // Loading functions
    async function loadSales(page = 1) {
      loading.value = true
      error.value = null
      
      try {
        const response = await axios.get('/sales', {
          params: {
            page,
            per_page: pagination.value.per_page
          }
        })

        if (response.data.success) {
          const paginatedData = response.data.data
          sales.value = paginatedData.data || []
          pagination.value = {
            current_page: paginatedData.current_page || 1,
            total: paginatedData.total || 0,
            per_page: paginatedData.per_page || 10
          }
        } else {
          sales.value = []
          error.value = 'Erro ao carregar vendas'
        }
      } catch (err) {
        error.value = err.message || 'Erro ao carregar vendas'
        sales.value = []
      } finally {
        loading.value = false
      }
    }

    async function loadCustomers() {
      try {
        const response = await axios.get('/customers')
        if (response.data.success) {
          customers.value = response.data.data
        }
      } catch (err) {
        console.error('Erro ao carregar clientes:', err)
      }
    }

    async function searchProducts() {
      if (!productSearch.value) {
        filteredProducts.value = []
        showProductResults.value = false
        return
      }

      try {
        const response = await axios.get('/products/search', {
          params: { query: productSearch.value }
        })
        
        if (response.data.success) {
          filteredProducts.value = response.data.data
          showProductResults.value = true
        }
      } catch (err) {
        console.error('Erro ao buscar produtos:', err)
      }
    }

    // Cart functions
    function addToCart(product) {
      const existingItem = cart.value.find(item => item.id === product.id)
      
      if (existingItem) {
        existingItem.quantity++
      } else {
        cart.value.push({
          id: product.id,
          name: product.name,
          price: product.price,
          quantity: 1
        })
      }

      productSearch.value = ''
      showProductResults.value = false
    }

    function updateQuantity(index, change) {
      const item = cart.value[index]
      const newQuantity = item.quantity + change

      if (newQuantity > 0) {
        item.quantity = newQuantity
      } else {
        removeFromCart(index)
      }
    }

    function removeFromCart(index) {
      cart.value.splice(index, 1)
    }

    async function finalizeSale() {
      if (!selectedCustomer.value || cart.value.length === 0) return

      try {
        const saleData = {
          customer_id: selectedCustomer.value.id,
          items: cart.value.map(item => ({
            product_id: item.id,
            quantity: item.quantity,
            price: item.price
          }))
        }

        const response = await axios.post('/sales', saleData)
        
        if (response.data.success) {
          // Clear form
          selectedCustomer.value = null
          cart.value = []
          productSearch.value = ''
          
          // Reload sales
          await loadSales()
        }
      } catch (err) {
        console.error('Erro ao finalizar venda:', err)
      }
    }

    // Action functions
    function openPrintModal(sale) {
      // Implement print logic
      console.log('Print sale:', sale)
    }

    // Lifecycle hooks
    onMounted(async () => {
      try {
        await Promise.all([
          loadSales(),
          loadCustomers()
        ])
      } catch (err) {
        console.error('Error initializing:', err)
      }
    })

    return {
      // State
      sales,
      loading,
      error,
      searchQuery,
      pagination,
      filteredSales,
      customers,
      selectedCustomer,
      productSearch,
      filteredProducts,
      showProductResults,
      cart,
      cartTotal,

      // Functions
      formatDateTime,
      formatPrice,
      loadSales,
      searchProducts,
      addToCart,
      updateQuantity,
      removeFromCart,
      finalizeSale,
      openPrintModal
    }
  }
}
</script>
